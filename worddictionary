class Node(object):
    def __init__(self):
        self.children = {}
        self.end = False

class WordDictionary(object):

    def __init__(self):
        self.root = Node()

    def addWord(self, word):
        """
        :type word: str
        :rtype: None
        """
        if not word:
            return
        child = self.root
        for c in word:
            if c not in child.children:
                child.children[c] = Node()
            child = child.children[c]
        child.end = True

    def search(self, word):
        """
        :type word: str
        :rtype: bool
        """
        def dfs(j, node):
            if not word:
                return False
            child = node
            for c in range(j, len(word)):
                if word[c] == '.':
                    for x in child.children.values():
                        if dfs(c+1, x):
                            return True
                    return False
                else:
                    if word[c] not in child.children:
                        return False
                    child = child.children[word[c]]
            return child.end
        return dfs(0, self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
