# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        if not list1 and not list2:
            return
        head = ListNode()
        list3 = head
        while list1 and list2:
            if list1 != None and (list2 == None or list1.val < list2.val):
                list3.next = list1
                list1 = list1.next
            elif list2 != None and (list1 == None or list1.val >= list2.val):
                list3.next = list2
                list2 = list2.next
            list3 = list3.next
        if list1:
            list3.next = list1
        if list2:
            list3.next = list2
        return head.next

    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        if not lists or len(lists) < 1:
            return None
        while len(lists)>1:
            templist = []
            for x in range(0, len(lists), 2):
                l1 = lists[x]
                l2 = lists[x+1] if x+1<len(lists) else None
                templist.append(self.mergeTwoLists(l1,l2))
            lists = templist
        return lists[0]

