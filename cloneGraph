"""
# Definition for a Node.
class Node(object):
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution(object):
    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """
        if not node:
            return node
        clones = {node.val: Node(node.val, [])}
        q = collections.deque([node])
        while q:
            cur = q.popleft()
            cur_clones = clones[cur.val]

            for n in cur.neighbors:
                if n.val not in clones:
                    clones[n.val] = Node(n.val, [])
                    q.append(n)
                cur_clones.neighbors.append(clones[n.val])
        
        return clones[node.val]
