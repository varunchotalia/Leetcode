# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        lst = [""]
        self.preorder(root, lst)
        return lst[0]
        
    def preorder(self, root, lst):
        if not root:
            lst[0] += " N"
            return
        lst[0] += " " + str(root.val)
        self.preorder(root.left, lst)
        self.preorder(root.right, lst)

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if not data:
            return []
        preorder = list(map(self.isNone, data.split()))
        self.i = 0
        def dfs():
            if preorder[self.i] is None:
                self.i += 1
                return None
            root = TreeNode(preorder[self.i])
            self.i+=1
            root.left = dfs()
            root.right = dfs()
            return root
        return dfs()

    def isNone(self, n):
        if n == 'N':
            return None
        return int(n)

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
